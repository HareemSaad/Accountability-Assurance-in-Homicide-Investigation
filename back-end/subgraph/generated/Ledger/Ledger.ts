// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BranchUpdate extends ethereum.Event {
  get params(): BranchUpdate__Params {
    return new BranchUpdate__Params(this);
  }
}

export class BranchUpdate__Params {
  _event: BranchUpdate;

  constructor(event: BranchUpdate) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get precinctAddress(): string {
    return this._event.parameters[1].value.toString();
  }

  get jurisdictionArea(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stateCode(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class Offboard extends ethereum.Event {
  get params(): Offboard__Params {
    return new Offboard__Params(this);
  }
}

export class Offboard__Params {
  _event: Offboard;

  constructor(event: Offboard) {
    this._event = event;
  }

  get officer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get employmentStatus(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get when(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OfficerAddressUpdated extends ethereum.Event {
  get params(): OfficerAddressUpdated__Params {
    return new OfficerAddressUpdated__Params(this);
  }
}

export class OfficerAddressUpdated__Params {
  _event: OfficerAddressUpdated;

  constructor(event: OfficerAddressUpdated) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get legalNumber(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get when(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OfficerBadgeUpdated extends ethereum.Event {
  get params(): OfficerBadgeUpdated__Params {
    return new OfficerBadgeUpdated__Params(this);
  }
}

export class OfficerBadgeUpdated__Params {
  _event: OfficerBadgeUpdated;

  constructor(event: OfficerBadgeUpdated) {
    this._event = event;
  }

  get officerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get badge(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get legalNumber(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get when(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OfficerNameUpdated extends ethereum.Event {
  get params(): OfficerNameUpdated__Params {
    return new OfficerNameUpdated__Params(this);
  }
}

export class OfficerNameUpdated__Params {
  _event: OfficerNameUpdated;

  constructor(event: OfficerNameUpdated) {
    this._event = event;
  }

  get officerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get legalNumber(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get when(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OfficerTransferred extends ethereum.Event {
  get params(): OfficerTransferred__Params {
    return new OfficerTransferred__Params(this);
  }
}

export class OfficerTransferred__Params {
  _event: OfficerTransferred;

  constructor(event: OfficerTransferred) {
    this._event = event;
  }

  get officer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromBranchId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get toBranchId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Onboard extends ethereum.Event {
  get params(): Onboard__Params {
    return new Onboard__Params(this);
  }
}

export class Onboard__Params {
  _event: Onboard;

  constructor(event: Onboard) {
    this._event = event;
  }

  get officer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get legalNumber(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get badge(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get branchId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get rank(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get when(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class Promotion extends ethereum.Event {
  get params(): Promotion__Params {
    return new Promotion__Params(this);
  }
}

export class Promotion__Params {
  _event: Promotion;

  constructor(event: Promotion) {
    this._event = event;
  }

  get officer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevRank(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get newRank(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Ledger__branchesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: string, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPrecinctAddress(): string {
    return this.value0;
  }

  getJurisdictionArea(): BigInt {
    return this.value1;
  }

  getStateCode(): BigInt {
    return this.value2;
  }

  getNumberOfOfficers(): BigInt {
    return this.value3;
  }
}

export class Ledger__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Ledger__officersResult {
  value0: string;
  value1: Bytes;
  value2: Bytes;
  value3: Bytes;
  value4: i32;
  value5: i32;

  constructor(
    value0: string,
    value1: Bytes,
    value2: Bytes,
    value3: Bytes,
    value4: i32,
    value5: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)),
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)),
    );
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getLegalNumber(): Bytes {
    return this.value1;
  }

  getBadge(): Bytes {
    return this.value2;
  }

  getBranchId(): Bytes {
    return this.value3;
  }

  getEmploymentStatus(): i32 {
    return this.value4;
  }

  getRank(): i32 {
    return this.value5;
  }
}

export class Ledger extends ethereum.SmartContract {
  static bind(address: Address): Ledger {
    return new Ledger("Ledger", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  badge(param0: Bytes): boolean {
    let result = super.call("badge", "badge(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_badge(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("badge", "badge(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  branches(param0: Bytes): Ledger__branchesResult {
    let result = super.call(
      "branches",
      "branches(bytes32):(string,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Ledger__branchesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_branches(param0: Bytes): ethereum.CallResult<Ledger__branchesResult> {
    let result = super.tryCall(
      "branches",
      "branches(bytes32):(string,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ledger__branchesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  eip712Domain(): Ledger__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new Ledger__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<Ledger__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ledger__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  isValidBranch(id: Bytes): boolean {
    let result = super.call("isValidBranch", "isValidBranch(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(id),
    ]);

    return result[0].toBoolean();
  }

  try_isValidBranch(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidBranch",
      "isValidBranch(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidEmployment(
    _branchId: Bytes,
    _stateCode: BigInt,
    _badge: Bytes,
    _rank: i32,
  ): boolean {
    let result = super.call(
      "isValidEmployment",
      "isValidEmployment(bytes32,uint256,bytes32,uint8):(bool)",
      [
        ethereum.Value.fromFixedBytes(_branchId),
        ethereum.Value.fromUnsignedBigInt(_stateCode),
        ethereum.Value.fromFixedBytes(_badge),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rank)),
      ],
    );

    return result[0].toBoolean();
  }

  try_isValidEmployment(
    _branchId: Bytes,
    _stateCode: BigInt,
    _badge: Bytes,
    _rank: i32,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidEmployment",
      "isValidEmployment(bytes32,uint256,bytes32,uint8):(bool)",
      [
        ethereum.Value.fromFixedBytes(_branchId),
        ethereum.Value.fromUnsignedBigInt(_stateCode),
        ethereum.Value.fromFixedBytes(_badge),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rank)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidRank(officer: Address, rank: i32): boolean {
    let result = super.call(
      "isValidRank",
      "isValidRank(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(officer),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rank)),
      ],
    );

    return result[0].toBoolean();
  }

  try_isValidRank(officer: Address, rank: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidRank",
      "isValidRank(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(officer),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rank)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidState(stateCode: BigInt): boolean {
    let result = super.call("isValidState", "isValidState(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(stateCode),
    ]);

    return result[0].toBoolean();
  }

  try_isValidState(stateCode: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidState", "isValidState(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(stateCode),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  legalNumber(param0: Bytes): boolean {
    let result = super.call("legalNumber", "legalNumber(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_legalNumber(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("legalNumber", "legalNumber(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moderatorCount(param0: BigInt): BigInt {
    let result = super.call(
      "moderatorCount",
      "moderatorCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_moderatorCount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "moderatorCount",
      "moderatorCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moderators(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "moderators",
      "moderators(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_moderators(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "moderators",
      "moderators(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  officers(param0: Address): Ledger__officersResult {
    let result = super.call(
      "officers",
      "officers(address):(string,bytes32,bytes32,bytes32,uint8,uint8)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Ledger__officersResult(
      result[0].toString(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBytes(),
      result[4].toI32(),
      result[5].toI32(),
    );
  }

  try_officers(param0: Address): ethereum.CallResult<Ledger__officersResult> {
    let result = super.tryCall(
      "officers",
      "officers(address):(string,bytes32,bytes32,bytes32,uint8,uint8)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Ledger__officersResult(
        value[0].toString(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBytes(),
        value[4].toI32(),
        value[5].toI32(),
      ),
    );
  }

  replay(param0: Bytes): boolean {
    let result = super.call("replay", "replay(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_replay(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("replay", "replay(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _branchId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _precinctAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _jurisdictionArea(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _legalNumber(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _badge(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddModeratorCall extends ethereum.Call {
  get inputs(): AddModeratorCall__Inputs {
    return new AddModeratorCall__Inputs(this);
  }

  get outputs(): AddModeratorCall__Outputs {
    return new AddModeratorCall__Outputs(this);
  }
}

export class AddModeratorCall__Inputs {
  _call: AddModeratorCall;

  constructor(call: AddModeratorCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _senderStateCode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _legalNumber(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _badge(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class AddModeratorCall__Outputs {
  _call: AddModeratorCall;

  constructor(call: AddModeratorCall) {
    this._call = call;
  }
}

export class CreateBranchCall extends ethereum.Call {
  get inputs(): CreateBranchCall__Inputs {
    return new CreateBranchCall__Inputs(this);
  }

  get outputs(): CreateBranchCall__Outputs {
    return new CreateBranchCall__Outputs(this);
  }
}

export class CreateBranchCall__Inputs {
  _call: CreateBranchCall;

  constructor(call: CreateBranchCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _precinctAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _jurisdictionArea(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }
}

export class CreateBranchCall__Outputs {
  _call: CreateBranchCall;

  constructor(call: CreateBranchCall) {
    this._call = call;
  }
}

export class OffboardCall extends ethereum.Call {
  get inputs(): OffboardCall__Inputs {
    return new OffboardCall__Inputs(this);
  }

  get outputs(): OffboardCall__Outputs {
    return new OffboardCall__Outputs(this);
  }
}

export class OffboardCall__Inputs {
  _call: OffboardCall;

  constructor(call: OffboardCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _employmentStatus(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _rank(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class OffboardCall__Outputs {
  _call: OffboardCall;

  constructor(call: OffboardCall) {
    this._call = call;
  }
}

export class OffboardCaptainCall extends ethereum.Call {
  get inputs(): OffboardCaptainCall__Inputs {
    return new OffboardCaptainCall__Inputs(this);
  }

  get outputs(): OffboardCaptainCall__Outputs {
    return new OffboardCaptainCall__Outputs(this);
  }
}

export class OffboardCaptainCall__Inputs {
  _call: OffboardCaptainCall;

  constructor(call: OffboardCaptainCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _employmentStatus(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _rank(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class OffboardCaptainCall__Outputs {
  _call: OffboardCaptainCall;

  constructor(call: OffboardCaptainCall) {
    this._call = call;
  }
}

export class OffboardModeratorCall extends ethereum.Call {
  get inputs(): OffboardModeratorCall__Inputs {
    return new OffboardModeratorCall__Inputs(this);
  }

  get outputs(): OffboardModeratorCall__Outputs {
    return new OffboardModeratorCall__Outputs(this);
  }
}

export class OffboardModeratorCall__Inputs {
  _call: OffboardModeratorCall;

  constructor(call: OffboardModeratorCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _employmentStatus(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _rank(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class OffboardModeratorCall__Outputs {
  _call: OffboardModeratorCall;

  constructor(call: OffboardModeratorCall) {
    this._call = call;
  }
}

export class OnboardCall extends ethereum.Call {
  get inputs(): OnboardCall__Inputs {
    return new OnboardCall__Inputs(this);
  }

  get outputs(): OnboardCall__Outputs {
    return new OnboardCall__Outputs(this);
  }
}

export class OnboardCall__Inputs {
  _call: OnboardCall;

  constructor(call: OnboardCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _legalNumber(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _badge(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _rank(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class OnboardCall__Outputs {
  _call: OnboardCall;

  constructor(call: OnboardCall) {
    this._call = call;
  }
}

export class Onboard1Call extends ethereum.Call {
  get inputs(): Onboard1Call__Inputs {
    return new Onboard1Call__Inputs(this);
  }

  get outputs(): Onboard1Call__Outputs {
    return new Onboard1Call__Outputs(this);
  }
}

export class Onboard1Call__Inputs {
  _call: Onboard1Call;

  constructor(call: Onboard1Call) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officerAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _badge(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _rank(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class Onboard1Call__Outputs {
  _call: Onboard1Call;

  constructor(call: Onboard1Call) {
    this._call = call;
  }
}

export class OnboardCaptainCall extends ethereum.Call {
  get inputs(): OnboardCaptainCall__Inputs {
    return new OnboardCaptainCall__Inputs(this);
  }

  get outputs(): OnboardCaptainCall__Outputs {
    return new OnboardCaptainCall__Outputs(this);
  }
}

export class OnboardCaptainCall__Inputs {
  _call: OnboardCaptainCall;

  constructor(call: OnboardCaptainCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _legalNumber(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _badge(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _branchId(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class OnboardCaptainCall__Outputs {
  _call: OnboardCaptainCall;

  constructor(call: OnboardCaptainCall) {
    this._call = call;
  }
}

export class PromoteCall extends ethereum.Call {
  get inputs(): PromoteCall__Inputs {
    return new PromoteCall__Inputs(this);
  }

  get outputs(): PromoteCall__Outputs {
    return new PromoteCall__Outputs(this);
  }
}

export class PromoteCall__Inputs {
  _call: PromoteCall;

  constructor(call: PromoteCall) {
    this._call = call;
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _officerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _newRank(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class PromoteCall__Outputs {
  _call: PromoteCall;

  constructor(call: PromoteCall) {
    this._call = call;
  }
}

export class TransferOfficerCall extends ethereum.Call {
  get inputs(): TransferOfficerCall__Inputs {
    return new TransferOfficerCall__Inputs(this);
  }

  get outputs(): TransferOfficerCall__Outputs {
    return new TransferOfficerCall__Outputs(this);
  }
}

export class TransferOfficerCall__Inputs {
  _call: TransferOfficerCall;

  constructor(call: TransferOfficerCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officerAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toBranchId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }
}

export class TransferOfficerCall__Outputs {
  _call: TransferOfficerCall;

  constructor(call: TransferOfficerCall) {
    this._call = call;
  }
}

export class UpdateAddressCall extends ethereum.Call {
  get inputs(): UpdateAddressCall__Inputs {
    return new UpdateAddressCall__Inputs(this);
  }

  get outputs(): UpdateAddressCall__Outputs {
    return new UpdateAddressCall__Outputs(this);
  }
}

export class UpdateAddressCall__Inputs {
  _call: UpdateAddressCall;

  constructor(call: UpdateAddressCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _newAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class UpdateAddressCall__Outputs {
  _call: UpdateAddressCall;

  constructor(call: UpdateAddressCall) {
    this._call = call;
  }
}

export class UpdateBadgeCall extends ethereum.Call {
  get inputs(): UpdateBadgeCall__Inputs {
    return new UpdateBadgeCall__Inputs(this);
  }

  get outputs(): UpdateBadgeCall__Outputs {
    return new UpdateBadgeCall__Outputs(this);
  }
}

export class UpdateBadgeCall__Inputs {
  _call: UpdateBadgeCall;

  constructor(call: UpdateBadgeCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _newBadge(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class UpdateBadgeCall__Outputs {
  _call: UpdateBadgeCall;

  constructor(call: UpdateBadgeCall) {
    this._call = call;
  }
}

export class UpdateBranchCall extends ethereum.Call {
  get inputs(): UpdateBranchCall__Inputs {
    return new UpdateBranchCall__Inputs(this);
  }

  get outputs(): UpdateBranchCall__Outputs {
    return new UpdateBranchCall__Outputs(this);
  }
}

export class UpdateBranchCall__Inputs {
  _call: UpdateBranchCall;

  constructor(call: UpdateBranchCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _precinctAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _jurisdictionArea(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _signatures(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }

  get _signers(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }
}

export class UpdateBranchCall__Outputs {
  _call: UpdateBranchCall;

  constructor(call: UpdateBranchCall) {
    this._call = call;
  }
}

export class UpdateNameCall extends ethereum.Call {
  get inputs(): UpdateNameCall__Inputs {
    return new UpdateNameCall__Inputs(this);
  }

  get outputs(): UpdateNameCall__Outputs {
    return new UpdateNameCall__Outputs(this);
  }
}

export class UpdateNameCall__Inputs {
  _call: UpdateNameCall;

  constructor(call: UpdateNameCall) {
    this._call = call;
  }

  get _nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stateCode(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _officer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _newName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _signer(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class UpdateNameCall__Outputs {
  _call: UpdateNameCall;

  constructor(call: UpdateNameCall) {
    this._call = call;
  }
}
